#pragma checksum "E:\VSProjects\GIT\Blazor_CORE\Blazor_CORE.Client\Pages\Concerts.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "b81d2a21522fe83805efb0b10725d1347e3b21f9"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace Blazor_CORE.Client.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Blazor;
    using Microsoft.AspNetCore.Blazor.Components;
    using System.Net.Http;
    using Microsoft.AspNetCore.Blazor.Layouts;
    using Microsoft.AspNetCore.Blazor.Routing;
    using Microsoft.JSInterop;
    using Blazor_CORE.Client;
    using Blazor_CORE.Client.Shared;
    using Blazor_CORE.Shared;
    using Blazor_CORE.Shared.Models;
    [Microsoft.AspNetCore.Blazor.Layouts.LayoutAttribute(typeof(MainLayout))]

    [Microsoft.AspNetCore.Blazor.Components.RouteAttribute("/Concerts")]
    public class Concerts : Microsoft.AspNetCore.Blazor.Components.BlazorComponent
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Blazor.RenderTree.RenderTreeBuilder builder)
        {
        }
        #pragma warning restore 1998
#line 309 "E:\VSProjects\GIT\Blazor_CORE\Blazor_CORE.Client\Pages\Concerts.cshtml"
            

    ConcertMasters[] arrConcertsMaster;
    ConcertDetails[] arrConcertsDetail;


    ConcertMasters concertM = new ConcertMasters();
    ConcertDetails concertD = new ConcertDetails();

    Boolean showAddMaster = false;
    Boolean showAddDetail = false;

    int showDetailStatus = 0;
    int sortStatus = 0;
    int concertIDs = 0;
    string Imageclass = "oi oi-expand-down";
    string ImageSortClass = "oi oi-sort-ascending";

    string Messages = "";

    protected override async Task OnInitAsync()
    {
        arrConcertsMaster = await Http.GetJsonAsync<ConcertMasters[]>("api/ConcertMasters/");
        concertD = new ConcertDetails();
        concertM = new ConcertMasters();
        Messages = "";
    }

    //to Add New Concert Master

    void AddNewConcertsMaster()
    {

        concertM = new ConcertMasters();
        concertM.ConcertDate = DateTime.Now;

        showAddMaster = true;
        showAddDetail = false;
        Imageclass = "oi oi-expand-down";
        showDetailStatus = 0;
        Messages = "";
    }

    //Save New or update ConcertsMaster

    protected async Task SaveConcertsMaster()
    {
        if (concertM.ConcertNo == 0)

        //new concert
        {
            await Http.SendJsonAsync(HttpMethod.Post, "/api/ConcertMasters/", concertM);
        }
        //existing concert
        else
        {
            await Http.SendJsonAsync(HttpMethod.Put, "/api/ConcertMasters/" + concertM.ConcertNo, concertM);
        }
        concertM = new ConcertMasters();
        arrConcertsMaster = await Http.GetJsonAsync<ConcertMasters[]>("/api/ConcertMasters/");

        Messages = "";
        showAddMaster = false;

    }

    //Edit Concert Master

    protected async Task EditConcertsMaster(int ConcertNos)
    {
        showAddMaster = true;
        concertM = await Http.GetJsonAsync<ConcertMasters>("/api/ConcertMasters/" + Convert.ToInt32(ConcertNos));
    }

    //Delete Concert Master  
    protected async Task DeleteConcertsMaster(int ConcertNos)
    {
        await Http.DeleteAsync("/api/ConcertMasters/" + Convert.ToInt32(ConcertNos));

        arrConcertsMaster = await Http.GetJsonAsync<ConcertMasters[]>("/api/ConcertMasters/");
        Messages = "";
    }

    //Sorting
    protected async Task ConcertSorting(string SortColumn)
    {
        arrConcertsMaster = await Http.GetJsonAsync<ConcertMasters[]>("/api/ConcertMasters/");
        Messages = "";

        if (sortStatus == 1)
        {
            ImageSortClass = "oi oi-sort-descending";
            sortStatus = 0;

            switch (SortColumn)
            {
                case "ConcertNo":
                    arrConcertsMaster = arrConcertsMaster.OrderBy(x => x.ConcertNo).ToArray();
                    break;
                case "HallId":
                    arrConcertsMaster = arrConcertsMaster.OrderBy(x => x.HallId).ToArray();
                    break;

                case "Description":
                    arrConcertsMaster = arrConcertsMaster.OrderBy(x => x.Description).ToArray();
                    break;
                case "ConcertDate":
                    arrConcertsMaster = arrConcertsMaster.OrderBy(x => x.ConcertDate).ToArray();
                    break;
                case "TicketServiceName":
                    arrConcertsMaster = arrConcertsMaster.OrderBy(x => x.TicketServiceName).ToArray();
                    break;
            }
        }
        else
        {
            ImageSortClass = "oi oi-sort-ascending";
            sortStatus = 1;

            switch (SortColumn)
            {
                case "ConcertNo":
                    arrConcertsMaster = arrConcertsMaster.OrderByDescending(x => x.ConcertNo).ToArray();
                    break;
                case "HallId":
                    arrConcertsMaster = arrConcertsMaster.OrderByDescending(x => x.HallId).ToArray();
                    break;

                case "Description":
                    arrConcertsMaster = arrConcertsMaster.OrderByDescending(x => x.Description).ToArray();
                    break;
                case "ConcertDate":
                    arrConcertsMaster = arrConcertsMaster.OrderByDescending(x => x.ConcertDate).ToArray();
                    break;
                case "TicketServiceName":
                    arrConcertsMaster = arrConcertsMaster.OrderByDescending(x => x.TicketServiceName).ToArray();
                    break;
            }
        }
    }

    // For Filtering by ConcertNo
    void OnConcertNoChanged(UIChangeEventArgs args)
    {
        string values = args.Value.ToString();
        concertFilteringList(values, "ConcertNo");
    }


    // For Filtering by TableId
    void OnHallIdChanged(UIChangeEventArgs args)
    {
        string values = args.Value.ToString();
        concertFilteringList(values, "HallId");
    }


    // For Filtering by Description
    void OnDescriptionChanged(UIChangeEventArgs args)
    {
        string values = args.Value.ToString();
        concertFilteringList(values, "Description");
    }


    // For Filtering by ConcertDate
    void OnConcertDateChanged(UIChangeEventArgs args)
    {
        string values = args.Value.ToString();
        concertFilteringList(values, "ConcertDate");
    }

    // For Filtering by WaiterName
    void OnTicketServiceNameChanged(UIChangeEventArgs args)
    {
        string values = args.Value.ToString();
        concertFilteringList(values, "TicketServiceName");
    }



    //Filtering
    protected async Task concertFilteringList(String Value, string columnName)
    {
        arrConcertsMaster = await Http.GetJsonAsync<ConcertMasters[]>("/api/ConcertMasters/");

        Messages = "";
        if (Value.Trim().Length > 0)
        {

            switch (columnName)
            {

                case "HallId":
                    arrConcertsMaster = arrConcertsMaster.Where(x => x.HallId.StartsWith(Value)).ToArray();
                    break;
                case "Description":
                    arrConcertsMaster = arrConcertsMaster.Where(x => x.Description.StartsWith(Value)).ToArray();
                    break;
                case "TicketServiceName":
                    arrConcertsMaster = arrConcertsMaster.Where(x => x.TicketServiceName.StartsWith(Value)).ToArray();
                    break;
            }

        }
        else
        {
            arrConcertsMaster = await Http.GetJsonAsync<ConcertMasters[]>("/api/ConcertMasters/");
        }
    }

    //Detail Grid CRUD

    protected async Task getConcertDetails(int concertID)
    {
        showAddMaster = false;
        showAddDetail = false;
        Messages = "";
        if (concertIDs != concertID)
        {
            Imageclass = "oi oi-collapse-up";
            showDetailStatus = 1;

        }
        else
        {
            if (showDetailStatus == 0)
            {
                Imageclass = "oi oi-expand-up";
                showDetailStatus = 1;
            }
            else
            {
                Imageclass = "oi oi-expand-down";
                showDetailStatus = 0;
            }

        }
        concertIDs = concertID;
        arrConcertsDetail = await Http.GetJsonAsync<ConcertDetails[]>("/api/ConcertDetails/" + Convert.ToInt32(concertID));

    }
    //to Add New Concert Detail

    protected async Task AddNewConcertDetails(int concertMasterNO)
    {
        
        concertD = new ConcertDetails();
        concertD.ConcertNo = concertMasterNO;
        Messages = "";

        showAddDetail = true;
        showAddMaster = false;

    }

    //Save New or update Concert detail
    protected async Task SaveConcertDetails()
    {
        if (concertD.ConcertDetailNo == 0)

        {
            await Http.SendJsonAsync(HttpMethod.Post, "/api/ConcertDetails/", concertD);

        }
        else
        {
            await Http.SendJsonAsync(HttpMethod.Put, "/api/ConcertDetails/" + concertD.ConcertDetailNo, concertD);
        }

        arrConcertsDetail = await Http.GetJsonAsync<ConcertDetails[]>("/api/ConcertDetails/" + Convert.ToInt32(concertD.ConcertNo));
        concertD = new ConcertDetails();
        showAddDetail = false;
        showAddMaster = false;
        Messages = "";
    }

    //Edit Concert detail
    protected async Task EditConcertDetails(int ConcertDetailNos)
    {
        concertD = await Http.GetJsonAsync<ConcertDetails>("/api/ConcertDetails/" + Convert.ToInt32(ConcertDetailNos) + "/update");
        showAddDetail = true;
        showAddMaster = false;
    }

    //Delete Concert detail
    protected async Task DeleteConcertDetails(int concertDetailNos, int concertMasterNo)
    {
        var concertNo = concertMasterNo;
        await Http.DeleteAsync("/api/ConcertDetails/" + Convert.ToInt32(concertDetailNos));

        //arrConcertsDetail = await Http.GetJsonAsync<ConcertDetails[]>("/api/ConcertDetails/" + Convert.ToInt32(ordVale));
        Imageclass = "oi oi-expand-down";
        showDetailStatus = 0;
        await getConcertDetails(concertNo);
        Messages = "";
    }

    void closeMessage()
    {
        Messages = "";
    }
    void hideAddMaster()
    {
        showAddMaster = false;
    }
    void hideAddDetail()
    {
        showAddDetail = false;
    }
    void hideConcertDetails()
    {
        Imageclass = "oi oi-expand-down";
        showDetailStatus = 0;
    }



#line default
#line hidden
        [global::Microsoft.AspNetCore.Blazor.Components.InjectAttribute] private HttpClient Http { get; set; }
    }
}
#pragma warning restore 1591
