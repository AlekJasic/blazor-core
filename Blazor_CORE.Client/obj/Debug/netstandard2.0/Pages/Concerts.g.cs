#pragma checksum "E:\VSProjects\Blazor_CORE\Blazor_CORE.Client\Pages\Concerts.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "bcccbd09c1971d414bbabc97bd80be729ae1a27f"
// <auto-generated/>
#pragma warning disable 1591
namespace Blazor_CORE.Client.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Blazor;
    using Microsoft.AspNetCore.Blazor.Components;
    using System.Net.Http;
    using Microsoft.AspNetCore.Blazor.Layouts;
    using Microsoft.AspNetCore.Blazor.Routing;
    using Microsoft.JSInterop;
    using Blazor_CORE.Client;
    using Blazor_CORE.Client.Shared;
    using Blazor_CORE.Shared;
    using Blazor_CORE.Shared.Models;
    [Microsoft.AspNetCore.Blazor.Layouts.LayoutAttribute(typeof(MainLayout))]

    [Microsoft.AspNetCore.Blazor.Components.RouteAttribute("/Concerts")]
    public class Concerts : Microsoft.AspNetCore.Blazor.Components.BlazorComponent
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Blazor.RenderTree.RenderTreeBuilder builder)
        {
            base.BuildRenderTree(builder);
            builder.AddMarkupContent(0, "<link href=\"~/css/site.css\" rel=\"stylesheet\">\n");
            builder.OpenElement(1, "button");
            builder.AddAttribute(2, "class", "btn btn-outline-info");
            builder.AddAttribute(3, "onclick", Microsoft.AspNetCore.Blazor.Components.BindMethods.GetEventHandlerValue<Microsoft.AspNetCore.Blazor.UIMouseEventArgs>(AddNewConcertsMaster));
            builder.AddContent(4, "Add New Concert");
            builder.CloseElement();
            builder.AddContent(5, "\n\n");
#line 13 "E:\VSProjects\Blazor_CORE\Blazor_CORE.Client\Pages\Concerts.cshtml"
 if (showAddMaster == true)
{

#line default
#line hidden
            builder.AddContent(6, "    ");
            builder.OpenElement(7, "table");
            builder.AddAttribute(8, "class", "gridAddConcert");
            builder.AddAttribute(9, "cellpadding", "2");
            builder.AddAttribute(10, "cellspacing", "2");
            builder.AddContent(11, "\n        ");
            builder.AddMarkupContent(12, "<tr class=\"gridAddConcertHeader\">\n            <td>\n                <h3> Add/Edit Concert Master</h3>\n            </td>\n        </tr>\n        ");
            builder.OpenElement(13, "tr");
            builder.AddContent(14, "\n            ");
            builder.OpenElement(15, "td");
            builder.AddContent(16, "\n                ");
            builder.OpenElement(17, "table");
            builder.AddAttribute(18, "class", "form-group");
            builder.AddContent(19, "\n                    ");
            builder.OpenElement(20, "tr");
            builder.AddContent(21, "\n                        ");
            builder.AddMarkupContent(22, "<td>\n                            <label for=\"Name\" class=\"control-label\">Hall Name</label>\n                        </td>\n                        ");
            builder.OpenElement(23, "td");
            builder.AddContent(24, "\n                            ");
            builder.OpenElement(25, "input");
            builder.AddAttribute(26, "type", "text");
            builder.AddAttribute(27, "class", "form-control");
            builder.AddAttribute(28, "value", Microsoft.AspNetCore.Blazor.Components.BindMethods.GetValue(concertM.HallId));
            builder.AddAttribute(29, "onchange", Microsoft.AspNetCore.Blazor.Components.BindMethods.SetValueHandler(__value => concertM.HallId = __value, concertM.HallId));
            builder.CloseElement();
            builder.AddContent(30, "\n                        ");
            builder.CloseElement();
            builder.AddContent(31, "\n                    ");
            builder.CloseElement();
            builder.AddContent(32, "\n                    ");
            builder.OpenElement(33, "tr");
            builder.AddContent(34, "\n                        ");
            builder.AddMarkupContent(35, "<td>\n                            <label for=\"Name\" class=\"control-label\">Description</label>\n                        </td>\n                        ");
            builder.OpenElement(36, "td");
            builder.AddContent(37, "\n                            ");
            builder.OpenElement(38, "input");
            builder.AddAttribute(39, "type", "text");
            builder.AddAttribute(40, "class", "form-control");
            builder.AddAttribute(41, "value", Microsoft.AspNetCore.Blazor.Components.BindMethods.GetValue(concertM.Description));
            builder.AddAttribute(42, "onchange", Microsoft.AspNetCore.Blazor.Components.BindMethods.SetValueHandler(__value => concertM.Description = __value, concertM.Description));
            builder.CloseElement();
            builder.AddContent(43, "\n                        ");
            builder.CloseElement();
            builder.AddContent(44, "\n                    ");
            builder.CloseElement();
            builder.AddContent(45, "\n                    ");
            builder.OpenElement(46, "tr");
            builder.AddContent(47, "\n                        ");
            builder.AddMarkupContent(48, "<td>\n                            <label for=\"Name\" class=\"control-label\">Ticket service name</label>\n                        </td>\n                        ");
            builder.OpenElement(49, "td");
            builder.AddContent(50, "\n                            ");
            builder.OpenElement(51, "input");
            builder.AddAttribute(52, "type", "text");
            builder.AddAttribute(53, "class", "form-control");
            builder.AddAttribute(54, "value", Microsoft.AspNetCore.Blazor.Components.BindMethods.GetValue(concertM.TicketServiceName));
            builder.AddAttribute(55, "onchange", Microsoft.AspNetCore.Blazor.Components.BindMethods.SetValueHandler(__value => concertM.TicketServiceName = __value, concertM.TicketServiceName));
            builder.CloseElement();
            builder.AddContent(56, "\n                        ");
            builder.CloseElement();
            builder.AddContent(57, "\n                    ");
            builder.CloseElement();
            builder.AddContent(58, "\n                    ");
            builder.OpenElement(59, "tr");
            builder.AddContent(60, "\n                        ");
            builder.AddMarkupContent(61, "<td>\n                            <label for=\"Name\" class=\"control-label\">Date</label>\n                        </td>\n                        ");
            builder.OpenElement(62, "td");
            builder.AddContent(63, "\n                            ");
            builder.OpenElement(64, "input");
            builder.AddAttribute(65, "type", "text");
            builder.AddAttribute(66, "class", "form-control");
            builder.AddAttribute(67, "value", Microsoft.AspNetCore.Blazor.Components.BindMethods.GetValue(concertM.ConcertDate));
            builder.AddAttribute(68, "onchange", Microsoft.AspNetCore.Blazor.Components.BindMethods.SetValueHandler(__value => concertM.ConcertDate = __value, concertM.ConcertDate));
            builder.CloseElement();
            builder.AddContent(69, "\n                        ");
            builder.CloseElement();
            builder.AddContent(70, "\n                    ");
            builder.CloseElement();
            builder.AddContent(71, "\n                    ");
            builder.OpenElement(72, "tr");
            builder.AddContent(73, "\n                        ");
            builder.OpenElement(74, "td");
            builder.AddContent(75, "\n                            ");
            builder.OpenElement(76, "button");
            builder.AddAttribute(77, "type", "submit");
            builder.AddAttribute(78, "class", "btn btn-outline-success");
            builder.AddAttribute(79, "onclick", Microsoft.AspNetCore.Blazor.Components.BindMethods.GetEventHandlerValue<Microsoft.AspNetCore.Blazor.UIMouseEventArgs>(async () => await SaveConcertsMaster()));
            builder.AddContent(80, "Save");
            builder.CloseElement();
            builder.AddContent(81, "\n                        ");
            builder.CloseElement();
            builder.AddContent(82, "\n                        ");
            builder.OpenElement(83, "td");
            builder.AddContent(84, "\n                            ");
            builder.OpenElement(85, "button");
            builder.AddAttribute(86, "type", "submit");
            builder.AddAttribute(87, "class", "btn btn-outline-danger");
            builder.AddAttribute(88, "onclick", Microsoft.AspNetCore.Blazor.Components.BindMethods.GetEventHandlerValue<Microsoft.AspNetCore.Blazor.UIMouseEventArgs>(hideAddMaster));
            builder.AddContent(89, "Cancel");
            builder.CloseElement();
            builder.AddContent(90, "\n                        ");
            builder.CloseElement();
            builder.AddContent(91, "\n                    ");
            builder.CloseElement();
            builder.AddContent(92, "\n                ");
            builder.CloseElement();
            builder.AddContent(93, "\n            ");
            builder.CloseElement();
            builder.AddContent(94, "\n        ");
            builder.CloseElement();
            builder.AddContent(95, "\n    ");
            builder.CloseElement();
            builder.AddContent(96, "\n");
#line 68 "E:\VSProjects\Blazor_CORE\Blazor_CORE.Client\Pages\Concerts.cshtml"
}

#line default
#line hidden
            builder.AddContent(97, "\n");
#line 70 "E:\VSProjects\Blazor_CORE\Blazor_CORE.Client\Pages\Concerts.cshtml"
 if (showAddDetail == true)
{

#line default
#line hidden
            builder.AddContent(98, "    ");
            builder.OpenElement(99, "table");
            builder.AddAttribute(100, "class", "gridAddDetail");
            builder.AddAttribute(101, "cellpadding", "2");
            builder.AddAttribute(102, "cellspacing", "2");
            builder.AddContent(103, "\n        ");
            builder.AddMarkupContent(104, "<tr class=\"gridAddDetailHeader\">\n            <td>\n                <h3> Add/Edit Concert Details</h3>\n            </td>\n        </tr>\n        ");
            builder.OpenElement(105, "tr");
            builder.AddContent(106, "\n            ");
            builder.OpenElement(107, "td");
            builder.AddContent(108, "\n                ");
            builder.OpenElement(109, "table");
            builder.AddAttribute(110, "class", "form-group");
            builder.AddContent(111, "\n                    ");
            builder.OpenElement(112, "tr");
            builder.AddContent(113, "\n                        ");
            builder.AddMarkupContent(114, "<td>\n                            <label for=\"Name\" class=\"control-label\">Concert No</label>\n                        </td>\n                        ");
            builder.OpenElement(115, "td");
            builder.AddContent(116, "\n                            ");
            builder.OpenElement(117, "input");
            builder.AddAttribute(118, "type", "text");
            builder.AddAttribute(119, "class", "form-control");
            builder.AddAttribute(120, "readonly", true);
            builder.AddAttribute(121, "value", Microsoft.AspNetCore.Blazor.Components.BindMethods.GetValue(concertD.ConcertNo));
            builder.AddAttribute(122, "onchange", Microsoft.AspNetCore.Blazor.Components.BindMethods.SetValueHandler(__value => concertD.ConcertNo = __value, concertD.ConcertNo));
            builder.CloseElement();
            builder.AddContent(123, "\n                        ");
            builder.CloseElement();
            builder.AddContent(124, "\n                        ");
            builder.AddMarkupContent(125, "<td width=\"20\">&nbsp;</td>\n                        ");
            builder.AddMarkupContent(126, "<td>\n                            <label for=\"Name\" class=\"control-label\">Artist Name</label>\n                        </td>\n                        ");
            builder.OpenElement(127, "td");
            builder.AddContent(128, "\n                            ");
            builder.OpenElement(129, "input");
            builder.AddAttribute(130, "type", "text");
            builder.AddAttribute(131, "class", "form-control");
            builder.AddAttribute(132, "value", Microsoft.AspNetCore.Blazor.Components.BindMethods.GetValue(concertD.ArtistName));
            builder.AddAttribute(133, "onchange", Microsoft.AspNetCore.Blazor.Components.BindMethods.SetValueHandler(__value => concertD.ArtistName = __value, concertD.ArtistName));
            builder.CloseElement();
            builder.AddContent(134, "\n                        ");
            builder.CloseElement();
            builder.AddContent(135, "\n                    ");
            builder.CloseElement();
            builder.AddContent(136, "\n                    ");
            builder.OpenElement(137, "tr");
            builder.AddContent(138, "\n                        ");
            builder.AddMarkupContent(139, "<td>\n                            <label for=\"Name\" class=\"control-label\">Comments</label>\n                        </td>\n                        ");
            builder.OpenElement(140, "td");
            builder.AddContent(141, "\n                            ");
            builder.OpenElement(142, "input");
            builder.AddAttribute(143, "type", "text");
            builder.AddAttribute(144, "class", "form-control");
            builder.AddAttribute(145, "value", Microsoft.AspNetCore.Blazor.Components.BindMethods.GetValue(concertD.Notes));
            builder.AddAttribute(146, "onchange", Microsoft.AspNetCore.Blazor.Components.BindMethods.SetValueHandler(__value => concertD.Notes = __value, concertD.Notes));
            builder.CloseElement();
            builder.AddContent(147, "\n                        ");
            builder.CloseElement();
            builder.AddContent(148, "\n                        ");
            builder.AddMarkupContent(149, "<td width=\"20\">&nbsp;</td>\n                        ");
            builder.AddMarkupContent(150, "<td>\n                            <label for=\"Name\" class=\"control-label\">Quantity</label>\n                        </td>\n                        ");
            builder.OpenElement(151, "td");
            builder.AddContent(152, "\n                            ");
            builder.OpenElement(153, "input");
            builder.AddAttribute(154, "type", "text");
            builder.AddAttribute(155, "class", "form-control");
            builder.AddAttribute(156, "value", Microsoft.AspNetCore.Blazor.Components.BindMethods.GetValue(concertD.Quantity));
            builder.AddAttribute(157, "onchange", Microsoft.AspNetCore.Blazor.Components.BindMethods.SetValueHandler(__value => concertD.Quantity = __value, concertD.Quantity));
            builder.CloseElement();
            builder.AddContent(158, "\n                        ");
            builder.CloseElement();
            builder.AddContent(159, "\n                    ");
            builder.CloseElement();
            builder.AddContent(160, "\n                    ");
            builder.OpenElement(161, "tr");
            builder.AddContent(162, "\n                        ");
            builder.AddMarkupContent(163, "<td>\n                            <label for=\"Name\" class=\"control-label\">Price</label>\n                        </td>\n                        ");
            builder.OpenElement(164, "td");
            builder.AddContent(165, "\n                            ");
            builder.OpenElement(166, "input");
            builder.AddAttribute(167, "type", "text");
            builder.AddAttribute(168, "class", "form-control");
            builder.AddAttribute(169, "value", Microsoft.AspNetCore.Blazor.Components.BindMethods.GetValue(concertD.Price));
            builder.AddAttribute(170, "onchange", Microsoft.AspNetCore.Blazor.Components.BindMethods.SetValueHandler(__value => concertD.Price = __value, concertD.Price));
            builder.CloseElement();
            builder.AddContent(171, "\n                        ");
            builder.CloseElement();
            builder.AddContent(172, "\n                        ");
            builder.OpenElement(173, "td");
            builder.AddAttribute(174, "colspan", "2");
            builder.AddAttribute(175, "align", "right");
            builder.AddContent(176, "\n                            ");
            builder.OpenElement(177, "button");
            builder.AddAttribute(178, "type", "submit");
            builder.AddAttribute(179, "class", "btn btn-outline-success");
            builder.AddAttribute(180, "onclick", Microsoft.AspNetCore.Blazor.Components.BindMethods.GetEventHandlerValue<Microsoft.AspNetCore.Blazor.UIMouseEventArgs>(async () => await SaveConcertDetails()));
            builder.AddContent(181, "Save");
            builder.CloseElement();
            builder.AddContent(182, "\n                        ");
            builder.CloseElement();
            builder.AddContent(183, "\n                        ");
            builder.OpenElement(184, "td");
            builder.AddContent(185, "\n                            ");
            builder.OpenElement(186, "button");
            builder.AddAttribute(187, "type", "submit");
            builder.AddAttribute(188, "class", "btn btn-outline-danger");
            builder.AddAttribute(189, "onclick", Microsoft.AspNetCore.Blazor.Components.BindMethods.GetEventHandlerValue<Microsoft.AspNetCore.Blazor.UIMouseEventArgs>(hideAddDetail));
            builder.AddContent(190, "Cancel");
            builder.CloseElement();
            builder.AddContent(191, "\n                        ");
            builder.CloseElement();
            builder.AddContent(192, "\n                    ");
            builder.CloseElement();
            builder.AddContent(193, "\n                ");
            builder.CloseElement();
            builder.AddContent(194, "\n            ");
            builder.CloseElement();
            builder.AddContent(195, "\n        ");
            builder.CloseElement();
            builder.AddContent(196, "\n    ");
            builder.CloseElement();
            builder.AddContent(197, "\n");
#line 129 "E:\VSProjects\Blazor_CORE\Blazor_CORE.Client\Pages\Concerts.cshtml"
}

#line default
#line hidden
            builder.AddMarkupContent(198, "\n<img src=\"~/Images/blank.gif\" alt=\"\" width=\"1\" height=\"2\">\n<hr>\n");
#line 133 "E:\VSProjects\Blazor_CORE\Blazor_CORE.Client\Pages\Concerts.cshtml"
 if (arrConcertsMaster == null)
{

#line default
#line hidden
            builder.AddContent(199, "    ");
            builder.AddMarkupContent(200, "<p><em>Loading...</em></p>\n");
#line 136 "E:\VSProjects\Blazor_CORE\Blazor_CORE.Client\Pages\Concerts.cshtml"
}
else
{

#line default
#line hidden
            builder.AddContent(201, "    ");
            builder.OpenElement(202, "table");
            builder.AddAttribute(203, "class", "form-group");
            builder.AddAttribute(204, "cellpadding", "2");
            builder.AddAttribute(205, "cellspacing", "2");
            builder.AddContent(206, "\n        ");
            builder.OpenElement(207, "tr");
            builder.AddAttribute(208, "class", "gridConcerstHeader");
            builder.AddMarkupContent(209, "\n            <td class=\"emptyCell\"></td>\n            ");
            builder.AddMarkupContent(210, "<td class=\"headerCellEdit\"><b>Edit</b></td>\n            ");
            builder.AddMarkupContent(211, "<td class=\"headerCellDelete\"><b>Delete</b></td>\n            ");
            builder.OpenElement(212, "td");
            builder.AddAttribute(213, "class", "gridConcertCIDColumn");
            builder.AddContent(214, "\n                ");
            builder.AddMarkupContent(215, "<b>ConcertNo</b>&nbsp;\n                ");
            builder.OpenElement(216, "span");
            builder.AddAttribute(217, "class", ImageSortClass);
            builder.AddAttribute(218, "onclick", Microsoft.AspNetCore.Blazor.Components.BindMethods.GetEventHandlerValue<Microsoft.AspNetCore.Blazor.UIMouseEventArgs>(async () => await ConcertSorting("ConcertNo")));
            builder.CloseElement();
            builder.AddContent(219, "\n            ");
            builder.CloseElement();
            builder.AddContent(220, "\n            ");
            builder.OpenElement(221, "td");
            builder.AddAttribute(222, "class", "gridConcertsSortColumn");
            builder.AddContent(223, "\n                ");
            builder.AddMarkupContent(224, "<b>Hall Name</b>&nbsp;\n                ");
            builder.OpenElement(225, "span");
            builder.AddAttribute(226, "class", ImageSortClass);
            builder.AddAttribute(227, "onclick", Microsoft.AspNetCore.Blazor.Components.BindMethods.GetEventHandlerValue<Microsoft.AspNetCore.Blazor.UIMouseEventArgs>(async () => await ConcertSorting("HallId")));
            builder.CloseElement();
            builder.AddContent(228, "\n            ");
            builder.CloseElement();
            builder.AddContent(229, "\n            ");
            builder.OpenElement(230, "td");
            builder.AddAttribute(231, "class", "gridConcertsSortColumn");
            builder.AddContent(232, "\n                ");
            builder.AddMarkupContent(233, "<b>Description</b>&nbsp;\n                ");
            builder.OpenElement(234, "span");
            builder.AddAttribute(235, "class", ImageSortClass);
            builder.AddAttribute(236, "onclick", Microsoft.AspNetCore.Blazor.Components.BindMethods.GetEventHandlerValue<Microsoft.AspNetCore.Blazor.UIMouseEventArgs>(async () => await ConcertSorting("Description")));
            builder.CloseElement();
            builder.AddContent(237, "\n            ");
            builder.CloseElement();
            builder.AddContent(238, "\n            ");
            builder.OpenElement(239, "td");
            builder.AddAttribute(240, "class", "gridConcertsSortDateColumn");
            builder.AddContent(241, "\n                ");
            builder.AddMarkupContent(242, "<b> Concert Date</b>&nbsp;\n                ");
            builder.OpenElement(243, "span");
            builder.AddAttribute(244, "class", ImageSortClass);
            builder.AddAttribute(245, "onclick", Microsoft.AspNetCore.Blazor.Components.BindMethods.GetEventHandlerValue<Microsoft.AspNetCore.Blazor.UIMouseEventArgs>(async () => await ConcertSorting("ConcertDate")));
            builder.CloseElement();
            builder.AddContent(246, "\n            ");
            builder.CloseElement();
            builder.AddContent(247, "\n            ");
            builder.OpenElement(248, "td");
            builder.AddAttribute(249, "class", "gridConcertsSortColumn");
            builder.AddContent(250, "\n                ");
            builder.AddMarkupContent(251, "<b> Ticket service name</b>&nbsp;\n                ");
            builder.OpenElement(252, "span");
            builder.AddAttribute(253, "class", ImageSortClass);
            builder.AddAttribute(254, "onclick", Microsoft.AspNetCore.Blazor.Components.BindMethods.GetEventHandlerValue<Microsoft.AspNetCore.Blazor.UIMouseEventArgs>(async () => await ConcertSorting("TicketServiceName")));
            builder.CloseElement();
            builder.AddContent(255, "\n            ");
            builder.CloseElement();
            builder.AddContent(256, "\n        ");
            builder.CloseElement();
            builder.AddContent(257, "\n        ");
            builder.OpenElement(258, "tr");
            builder.AddAttribute(259, "class", "gridConcertFilterRow");
            builder.AddContent(260, "\n            ");
            builder.AddMarkupContent(261, "<td class=\"headerCellFilter\" colspan=\"4\">\n                <span class=\"oi oi-magnifying-glass\"></span> Filter By\n            </td>\n            ");
            builder.OpenElement(262, "td");
            builder.AddAttribute(263, "class", "filterInput");
            builder.AddContent(264, "\n                ");
            builder.OpenElement(265, "input");
            builder.AddAttribute(266, "onchange", Microsoft.AspNetCore.Blazor.Components.BindMethods.GetEventHandlerValue<Microsoft.AspNetCore.Blazor.UIChangeEventArgs>(OnHallIdChanged));
            builder.AddAttribute(267, "oninput", Microsoft.AspNetCore.Blazor.Components.BindMethods.GetEventHandlerValue<Microsoft.AspNetCore.Blazor.UIEventArgs>("(this.dispatchEvent(new CustomEvent('change', {bubbles: true})))"));
            builder.CloseElement();
            builder.AddContent(268, "\n            ");
            builder.CloseElement();
            builder.AddContent(269, "\n            ");
            builder.OpenElement(270, "td");
            builder.AddAttribute(271, "class", "filterInput");
            builder.AddContent(272, "\n                ");
            builder.OpenElement(273, "input");
            builder.AddAttribute(274, "onchange", Microsoft.AspNetCore.Blazor.Components.BindMethods.GetEventHandlerValue<Microsoft.AspNetCore.Blazor.UIChangeEventArgs>(OnDescriptionChanged));
            builder.AddAttribute(275, "oninput", Microsoft.AspNetCore.Blazor.Components.BindMethods.GetEventHandlerValue<Microsoft.AspNetCore.Blazor.UIEventArgs>("(this.dispatchEvent(new CustomEvent('change', {bubbles: true})))"));
            builder.CloseElement();
            builder.AddContent(276, "\n            ");
            builder.CloseElement();
            builder.AddMarkupContent(277, "\n            <td class=\"filterInput\"></td>\n            ");
            builder.OpenElement(278, "td");
            builder.AddAttribute(279, "class", "filterInput");
            builder.AddContent(280, "\n                ");
            builder.OpenElement(281, "input");
            builder.AddAttribute(282, "onchange", Microsoft.AspNetCore.Blazor.Components.BindMethods.GetEventHandlerValue<Microsoft.AspNetCore.Blazor.UIChangeEventArgs>(OnTicketServiceNameChanged));
            builder.AddAttribute(283, "oninput", Microsoft.AspNetCore.Blazor.Components.BindMethods.GetEventHandlerValue<Microsoft.AspNetCore.Blazor.UIEventArgs>("(this.dispatchEvent(new CustomEvent('change', {bubbles: true})))"));
            builder.CloseElement();
            builder.AddContent(284, "\n            ");
            builder.CloseElement();
            builder.AddContent(285, "\n        ");
            builder.CloseElement();
            builder.AddContent(286, "\n");
#line 180 "E:\VSProjects\Blazor_CORE\Blazor_CORE.Client\Pages\Concerts.cshtml"
         foreach (var ConcertMasterObj in arrConcertsMaster)
        {

#line default
#line hidden
            builder.AddContent(287, "            ");
            builder.OpenElement(288, "tr");
            builder.AddAttribute(289, "class", "gridConcertRow");
            builder.AddAttribute(290, "style", "background-color:" + " " + (ConcertMasterObj.ConcertNo == concertIDs ? "#ECF3F4" : "#FFFFFF"));
            builder.AddContent(291, "\n                ");
            builder.OpenElement(292, "td");
            builder.AddAttribute(293, "class", "gridConcertDataCell");
            builder.AddContent(294, "\n\n");
#line 185 "E:\VSProjects\Blazor_CORE\Blazor_CORE.Client\Pages\Concerts.cshtml"
                     if (@ConcertMasterObj.ConcertNo == concertIDs)
                    {
                        

#line default
#line hidden
#line 187 "E:\VSProjects\Blazor_CORE\Blazor_CORE.Client\Pages\Concerts.cshtml"
                         if (Imageclass == "oi oi-expand-down")
                        {

#line default
#line hidden
            builder.AddContent(295, "                            ");
            builder.OpenElement(296, "span");
            builder.AddAttribute(297, "class", Imageclass);
            builder.AddAttribute(298, "onclick", Microsoft.AspNetCore.Blazor.Components.BindMethods.GetEventHandlerValue<Microsoft.AspNetCore.Blazor.UIMouseEventArgs>(async () => await getConcertDetails(@ConcertMasterObj.ConcertNo)));
            builder.CloseElement();
            builder.AddContent(299, "\n");
#line 190 "E:\VSProjects\Blazor_CORE\Blazor_CORE.Client\Pages\Concerts.cshtml"
                        }
                        else
                        {

#line default
#line hidden
            builder.AddContent(300, "                            ");
            builder.OpenElement(301, "span");
            builder.AddAttribute(302, "class", Imageclass);
            builder.AddAttribute(303, "onclick", Microsoft.AspNetCore.Blazor.Components.BindMethods.GetEventHandlerValue<Microsoft.AspNetCore.Blazor.UIMouseEventArgs>(hideConcertDetails));
            builder.CloseElement();
            builder.AddContent(304, "\n");
#line 194 "E:\VSProjects\Blazor_CORE\Blazor_CORE.Client\Pages\Concerts.cshtml"
                        }

#line default
#line hidden
#line 194 "E:\VSProjects\Blazor_CORE\Blazor_CORE.Client\Pages\Concerts.cshtml"
                         

                    }
                    else
                    {

#line default
#line hidden
            builder.AddContent(305, "                        ");
            builder.OpenElement(306, "span");
            builder.AddAttribute(307, "class", "oi oi-expand-down");
            builder.AddAttribute(308, "onclick", Microsoft.AspNetCore.Blazor.Components.BindMethods.GetEventHandlerValue<Microsoft.AspNetCore.Blazor.UIMouseEventArgs>(async () => await getConcertDetails(@ConcertMasterObj.ConcertNo)));
            builder.CloseElement();
            builder.AddContent(309, "\n");
#line 200 "E:\VSProjects\Blazor_CORE\Blazor_CORE.Client\Pages\Concerts.cshtml"

                    }

#line default
#line hidden
            builder.AddContent(310, "                ");
            builder.CloseElement();
            builder.AddContent(311, "\n                ");
            builder.OpenElement(312, "td");
            builder.AddAttribute(313, "class", "gridConcertDataCell");
            builder.AddContent(314, "\n\n                    ");
            builder.OpenElement(315, "span");
            builder.AddAttribute(316, "class", "oi oi-pencil");
            builder.AddAttribute(317, "alt", "Edit");
            builder.AddAttribute(318, "onclick", Microsoft.AspNetCore.Blazor.Components.BindMethods.GetEventHandlerValue<Microsoft.AspNetCore.Blazor.UIMouseEventArgs>(async () => await EditConcertsMaster(@ConcertMasterObj.ConcertNo)));
            builder.CloseElement();
            builder.AddContent(319, "\n                ");
            builder.CloseElement();
            builder.AddContent(320, "\n                ");
            builder.OpenElement(321, "td");
            builder.AddAttribute(322, "class", "gridConcertDataCell");
            builder.AddContent(323, "\n\n                    ");
            builder.OpenElement(324, "span");
            builder.AddAttribute(325, "class", "oi oi-trash");
            builder.AddAttribute(326, "alt", "Delete");
            builder.AddAttribute(327, "onclick", Microsoft.AspNetCore.Blazor.Components.BindMethods.GetEventHandlerValue<Microsoft.AspNetCore.Blazor.UIMouseEventArgs>(async () => await DeleteConcertsMaster(@ConcertMasterObj.ConcertNo)));
            builder.CloseElement();
            builder.AddContent(328, "\n                ");
            builder.CloseElement();
            builder.AddContent(329, "\n                ");
            builder.OpenElement(330, "td");
            builder.AddAttribute(331, "class", "gridConcertDataCell");
            builder.AddContent(332, "\n                    ");
            builder.AddContent(333, ConcertMasterObj.ConcertNo);
            builder.AddContent(334, "\n                ");
            builder.CloseElement();
            builder.AddContent(335, "\n                ");
            builder.OpenElement(336, "td");
            builder.AddAttribute(337, "class", "gridConcertDataCell");
            builder.AddContent(338, "\n                    ");
            builder.AddContent(339, ConcertMasterObj.HallId);
            builder.AddContent(340, "\n                ");
            builder.CloseElement();
            builder.AddContent(341, "\n                ");
            builder.OpenElement(342, "td");
            builder.AddAttribute(343, "class", "gridConcertDataCell");
            builder.AddContent(344, "\n                    ");
            builder.AddContent(345, ConcertMasterObj.Description);
            builder.AddContent(346, "\n                ");
            builder.CloseElement();
            builder.AddContent(347, "\n                ");
            builder.OpenElement(348, "td");
            builder.AddAttribute(349, "class", "gridConcertDataCell");
            builder.AddContent(350, "\n                    ");
            builder.AddContent(351, ConcertMasterObj.ConcertDate.ToShortDateString());
            builder.AddContent(352, "\n                ");
            builder.CloseElement();
            builder.AddContent(353, "\n                ");
            builder.OpenElement(354, "td");
            builder.AddAttribute(355, "class", "gridConcertDataCell");
            builder.AddContent(356, "\n                    ");
            builder.AddContent(357, ConcertMasterObj.TicketServiceName);
            builder.AddContent(358, "\n                ");
            builder.CloseElement();
            builder.AddContent(359, "\n            ");
            builder.CloseElement();
            builder.AddContent(360, "\n");
#line 227 "E:\VSProjects\Blazor_CORE\Blazor_CORE.Client\Pages\Concerts.cshtml"
             if (arrConcertsDetail != null)
            {
                

#line default
#line hidden
#line 229 "E:\VSProjects\Blazor_CORE\Blazor_CORE.Client\Pages\Concerts.cshtml"
                 if (showDetailStatus == 1)
                {
                    

#line default
#line hidden
#line 231 "E:\VSProjects\Blazor_CORE\Blazor_CORE.Client\Pages\Concerts.cshtml"
                     if (@ConcertMasterObj.ConcertNo == concertIDs)
                    {


#line default
#line hidden
            builder.AddContent(361, "                        ");
            builder.OpenElement(362, "tr");
            builder.AddContent(363, "\n                            ");
            builder.OpenElement(364, "td");
            builder.AddAttribute(365, "valign", "top");
            builder.AddContent(366, "\n                                ");
            builder.OpenElement(367, "button");
            builder.AddAttribute(368, "class", "btn btn-outline-info");
            builder.AddAttribute(369, "onclick", Microsoft.AspNetCore.Blazor.Components.BindMethods.GetEventHandlerValue<Microsoft.AspNetCore.Blazor.UIMouseEventArgs>(async () => await AddNewConcertDetails(@ConcertMasterObj.ConcertNo)));
            builder.AddContent(370, "Add New Detail");
            builder.CloseElement();
            builder.AddContent(371, "\n                            ");
            builder.CloseElement();
            builder.AddContent(372, "\n                            ");
            builder.OpenElement(373, "td");
            builder.AddAttribute(374, "colspan", "7");
            builder.AddContent(375, "\n                                ");
            builder.OpenElement(376, "table");
            builder.AddAttribute(377, "class", "griDetails");
            builder.AddContent(378, "\n                                    ");
            builder.OpenElement(379, "tr");
            builder.AddAttribute(380, "class", "gridDetailsHeader");
            builder.AddAttribute(381, "style", "visibility:" + " " + (arrConcertsDetail.Length > 0 ? "visible" : "hidden"));
            builder.AddContent(382, "\n                                        ");
            builder.AddMarkupContent(383, "<td class=\"headerCellEdit\"><b>Edit</b></td>\n                                        ");
            builder.AddMarkupContent(384, "<td class=\"headerCellDelete\"><b>Delete</b></td>\n                                        ");
            builder.AddMarkupContent(385, "<td class=\"gridConcertCIDColumn\">\n                                            <b> Concert Number</b>\n                                        </td>\n                                        ");
            builder.AddMarkupContent(386, "<td class=\"gridDetailsCell\">\n                                            <b>  Concert Detail Number</b>\n                                        </td>\n                                        ");
            builder.AddMarkupContent(387, "<td class=\"gridDetailsCellSmall\">\n                                            <b> Artist Name</b>\n                                        </td>\n                                        ");
            builder.AddMarkupContent(388, "<td class=\"gridDetailsCellBig\">\n                                            <b>Comments</b>\n                                        </td>\n                                        ");
            builder.AddMarkupContent(389, "<td class=\"gridDetailsCellSmall\">\n                                            <b>  QTY</b>\n                                        </td>\n                                        ");
            builder.AddMarkupContent(390, "<td class=\"gridDetailsCellSmall\">\n                                            <b> Price</b>\n                                        </td>\n                                    ");
            builder.CloseElement();
            builder.AddContent(391, "\n");
#line 262 "E:\VSProjects\Blazor_CORE\Blazor_CORE.Client\Pages\Concerts.cshtml"
                                     foreach (var concertDetailsObj in arrConcertsDetail)
                                    {

#line default
#line hidden
            builder.AddContent(392, "                                        ");
            builder.OpenElement(393, "tr");
            builder.AddAttribute(394, "class", "gridDetailsRow");
            builder.AddContent(395, "\n                                            ");
            builder.OpenElement(396, "td");
            builder.AddAttribute(397, "class", "gridConcertDataCell");
            builder.AddContent(398, "\n\n                                                ");
            builder.OpenElement(399, "span");
            builder.AddAttribute(400, "class", "oi oi-pencil");
            builder.AddAttribute(401, "alt", "Edit");
            builder.AddAttribute(402, "onclick", Microsoft.AspNetCore.Blazor.Components.BindMethods.GetEventHandlerValue<Microsoft.AspNetCore.Blazor.UIMouseEventArgs>(async () => await EditConcertDetails(@concertDetailsObj.ConcertDetailNo)));
            builder.CloseElement();
            builder.AddContent(403, "\n                                            ");
            builder.CloseElement();
            builder.AddContent(404, "\n                                            ");
            builder.OpenElement(405, "td");
            builder.AddAttribute(406, "class", "gridConcertDataCell");
            builder.AddContent(407, "\n\n                                                ");
            builder.OpenElement(408, "span");
            builder.AddAttribute(409, "class", "oi oi-trash");
            builder.AddAttribute(410, "alt", "Delete");
            builder.AddAttribute(411, "onclick", Microsoft.AspNetCore.Blazor.Components.BindMethods.GetEventHandlerValue<Microsoft.AspNetCore.Blazor.UIMouseEventArgs>(async () => await DeleteConcertDetails(@concertDetailsObj.ConcertDetailNo, @concertDetailsObj.ConcertNo)));
            builder.CloseElement();
            builder.AddContent(412, "\n                                            ");
            builder.CloseElement();
            builder.AddContent(413, "\n                                            ");
            builder.OpenElement(414, "td");
            builder.AddAttribute(415, "class", "gridConcertDataCell");
            builder.AddContent(416, "\n                                                ");
            builder.AddContent(417, concertDetailsObj.ConcertNo);
            builder.AddContent(418, "\n                                            ");
            builder.CloseElement();
            builder.AddContent(419, "\n                                            ");
            builder.OpenElement(420, "td");
            builder.AddAttribute(421, "class", "gridConcertDataCell");
            builder.AddContent(422, "\n                                                ");
            builder.AddContent(423, concertDetailsObj.ConcertDetailNo);
            builder.AddContent(424, "\n                                            ");
            builder.CloseElement();
            builder.AddContent(425, "\n                                            ");
            builder.OpenElement(426, "td");
            builder.AddAttribute(427, "class", "gridConcertDataCell");
            builder.AddContent(428, "\n                                                ");
            builder.AddContent(429, concertDetailsObj.ArtistName);
            builder.AddContent(430, "\n                                            ");
            builder.CloseElement();
            builder.AddContent(431, "\n                                            ");
            builder.OpenElement(432, "td");
            builder.AddAttribute(433, "class", "gridConcertDataCell");
            builder.AddContent(434, "\n                                                ");
            builder.AddContent(435, concertDetailsObj.Notes);
            builder.AddContent(436, "\n                                            ");
            builder.CloseElement();
            builder.AddContent(437, "\n                                            ");
            builder.OpenElement(438, "td");
            builder.AddAttribute(439, "class", "gridConcertDataCell");
            builder.AddContent(440, "\n                                                ");
            builder.AddContent(441, concertDetailsObj.Quantity);
            builder.AddContent(442, "\n                                            ");
            builder.CloseElement();
            builder.AddContent(443, "\n                                            ");
            builder.OpenElement(444, "td");
            builder.AddAttribute(445, "class", "gridConcertDataCell");
            builder.AddContent(446, "\n                                                ");
            builder.AddContent(447, concertDetailsObj.Price);
            builder.AddContent(448, "\n                                            ");
            builder.CloseElement();
            builder.AddContent(449, "\n                                        ");
            builder.CloseElement();
            builder.AddContent(450, "\n");
#line 292 "E:\VSProjects\Blazor_CORE\Blazor_CORE.Client\Pages\Concerts.cshtml"
                                    }

#line default
#line hidden
            builder.AddContent(451, "                                ");
            builder.CloseElement();
            builder.AddContent(452, "\n                            ");
            builder.CloseElement();
            builder.AddContent(453, "\n                        ");
            builder.CloseElement();
            builder.AddContent(454, "\n                        ");
            builder.OpenElement(455, "tr");
            builder.AddAttribute(456, "class", "gridDetailsTotalRow");
            builder.AddAttribute(457, "style", "visibility:" + " " + (arrConcertsDetail.Length > 0 ? "visible" : "hidden"));
            builder.AddContent(458, "\n                            ");
            builder.OpenElement(459, "td");
            builder.AddAttribute(460, "colspan", "8");
            builder.AddAttribute(461, "align", "center");
            builder.AddContent(462, "\n                                Concerts Details of  Concerts NO - ");
            builder.OpenElement(463, "strong");
            builder.AddContent(464, " ");
            builder.AddContent(465, ConcertMasterObj.ConcertNo);
            builder.AddContent(466, " ");
            builder.CloseElement();
            builder.AddContent(467, " ,Total ");
            builder.AddContent(468, arrConcertsDetail.Length);
            builder.AddContent(469, "  details for this Concert\n                            ");
            builder.CloseElement();
            builder.AddContent(470, "\n                        ");
            builder.CloseElement();
            builder.AddContent(471, "\n");
#line 301 "E:\VSProjects\Blazor_CORE\Blazor_CORE.Client\Pages\Concerts.cshtml"
                    }

#line default
#line hidden
#line 301 "E:\VSProjects\Blazor_CORE\Blazor_CORE.Client\Pages\Concerts.cshtml"
                     
                }

#line default
#line hidden
#line 302 "E:\VSProjects\Blazor_CORE\Blazor_CORE.Client\Pages\Concerts.cshtml"
                 
            }

#line default
#line hidden
#line 303 "E:\VSProjects\Blazor_CORE\Blazor_CORE.Client\Pages\Concerts.cshtml"
             
        }

#line default
#line hidden
            builder.AddContent(472, "    ");
            builder.CloseElement();
            builder.AddContent(473, "\n");
#line 306 "E:\VSProjects\Blazor_CORE\Blazor_CORE.Client\Pages\Concerts.cshtml"
}

#line default
#line hidden
        }
        #pragma warning restore 1998
#line 309 "E:\VSProjects\Blazor_CORE\Blazor_CORE.Client\Pages\Concerts.cshtml"
            

    ConcertMasters[] arrConcertsMaster;
    ConcertDetails[] arrConcertsDetail;


    ConcertMasters concertM = new ConcertMasters();
    ConcertDetails concertD = new ConcertDetails();

    Boolean showAddMaster = false;
    Boolean showAddDetail = false;

    int showDetailStatus = 0;
    int sortStatus = 0;
    int concertIDs = 0;
    string Imageclass = "oi oi-expand-down";
    string ImageSortClass = "oi oi-sort-ascending";

    string Messages = "";

    protected override async Task OnInitAsync()
    {
        arrConcertsMaster = await Http.GetJsonAsync<ConcertMasters[]>("api/ConcertMasters/");
        concertD = new ConcertDetails();
        concertM = new ConcertMasters();
        Messages = "";
    }

    //to Add New Concert Master

    void AddNewConcertsMaster()
    {

        concertM = new ConcertMasters();
        concertM.ConcertDate = DateTime.Now;

        showAddMaster = true;
        showAddDetail = false;
        Imageclass = "oi oi-expand-down";
        showDetailStatus = 0;
        Messages = "";
    }

    //Save New or update ConcertsMaster

    protected async Task SaveConcertsMaster()
    {
        if (concertM.ConcertNo == 0)

        //new concert
        {
            await Http.SendJsonAsync(HttpMethod.Post, "/api/ConcertMasters/", concertM);
        }
        //existing concert
        else
        {
            await Http.SendJsonAsync(HttpMethod.Put, "/api/ConcertMasters/" + concertM.ConcertNo, concertM);
        }
        concertM = new ConcertMasters();
        arrConcertsMaster = await Http.GetJsonAsync<ConcertMasters[]>("/api/ConcertMasters/");

        Messages = "";
        showAddMaster = false;

    }

    //Edit Concert Master

    protected async Task EditConcertsMaster(int ConcertNos)
    {
        showAddMaster = true;
        concertM = await Http.GetJsonAsync<ConcertMasters>("/api/ConcertMasters/" + Convert.ToInt32(ConcertNos));
    }

    //Delete Concert Master  
    protected async Task DeleteConcertsMaster(int ConcertNos)
    {
        await Http.DeleteAsync("/api/ConcertMasters/" + Convert.ToInt32(ConcertNos));

        arrConcertsMaster = await Http.GetJsonAsync<ConcertMasters[]>("/api/ConcertMasters/");
        Messages = "";
    }

    //Sorting
    protected async Task ConcertSorting(string SortColumn)
    {
        arrConcertsMaster = await Http.GetJsonAsync<ConcertMasters[]>("/api/ConcertMasters/");
        Messages = "";

        if (sortStatus == 1)
        {
            ImageSortClass = "oi oi-sort-descending";
            sortStatus = 0;

            switch (SortColumn)
            {
                case "ConcertNo":
                    arrConcertsMaster = arrConcertsMaster.OrderBy(x => x.ConcertNo).ToArray();
                    break;
                case "HallId":
                    arrConcertsMaster = arrConcertsMaster.OrderBy(x => x.HallId).ToArray();
                    break;

                case "Description":
                    arrConcertsMaster = arrConcertsMaster.OrderBy(x => x.Description).ToArray();
                    break;
                case "ConcertDate":
                    arrConcertsMaster = arrConcertsMaster.OrderBy(x => x.ConcertDate).ToArray();
                    break;
                case "TicketServiceName":
                    arrConcertsMaster = arrConcertsMaster.OrderBy(x => x.TicketServiceName).ToArray();
                    break;
            }
        }
        else
        {
            ImageSortClass = "oi oi-sort-ascending";
            sortStatus = 1;

            switch (SortColumn)
            {
                case "ConcertNo":
                    arrConcertsMaster = arrConcertsMaster.OrderByDescending(x => x.ConcertNo).ToArray();
                    break;
                case "HallId":
                    arrConcertsMaster = arrConcertsMaster.OrderByDescending(x => x.HallId).ToArray();
                    break;

                case "Description":
                    arrConcertsMaster = arrConcertsMaster.OrderByDescending(x => x.Description).ToArray();
                    break;
                case "ConcertDate":
                    arrConcertsMaster = arrConcertsMaster.OrderByDescending(x => x.ConcertDate).ToArray();
                    break;
                case "TicketServiceName":
                    arrConcertsMaster = arrConcertsMaster.OrderByDescending(x => x.TicketServiceName).ToArray();
                    break;
            }
        }
    }

    // For Filtering by ConcertNo
    void OnConcertNoChanged(UIChangeEventArgs args)
    {
        string values = args.Value.ToString();
        concertFilteringList(values, "ConcertNo");
    }


    // For Filtering by TableId
    void OnHallIdChanged(UIChangeEventArgs args)
    {
        string values = args.Value.ToString();
        concertFilteringList(values, "HallId");
    }


    // For Filtering by Description
    void OnDescriptionChanged(UIChangeEventArgs args)
    {
        string values = args.Value.ToString();
        concertFilteringList(values, "Description");
    }


    // For Filtering by ConcertDate
    void OnConcertDateChanged(UIChangeEventArgs args)
    {
        string values = args.Value.ToString();
        concertFilteringList(values, "ConcertDate");
    }

    // For Filtering by WaiterName
    void OnTicketServiceNameChanged(UIChangeEventArgs args)
    {
        string values = args.Value.ToString();
        concertFilteringList(values, "TicketServiceName");
    }



    //Filtering
    protected async Task concertFilteringList(String Value, string columnName)
    {
        arrConcertsMaster = await Http.GetJsonAsync<ConcertMasters[]>("/api/ConcertMasters/");

        Messages = "";
        if (Value.Trim().Length > 0)
        {

            switch (columnName)
            {

                case "HallId":
                    arrConcertsMaster = arrConcertsMaster.Where(x => x.HallId.StartsWith(Value)).ToArray();
                    break;
                case "Description":
                    arrConcertsMaster = arrConcertsMaster.Where(x => x.Description.StartsWith(Value)).ToArray();
                    break;
                case "TicketServiceName":
                    arrConcertsMaster = arrConcertsMaster.Where(x => x.TicketServiceName.StartsWith(Value)).ToArray();
                    break;
            }

        }
        else
        {
            arrConcertsMaster = await Http.GetJsonAsync<ConcertMasters[]>("/api/ConcertMasters/");
        }
    }

    //Detail Grid CRUD

    protected async Task getConcertDetails(int concertID)
    {
        showAddMaster = false;
        showAddDetail = false;
        Messages = "";
        if (concertIDs != concertID)
        {
            Imageclass = "oi oi-collapse-up";
            showDetailStatus = 1;

        }
        else
        {
            if (showDetailStatus == 0)
            {
                Imageclass = "oi oi-expand-up";
                showDetailStatus = 1;
            }
            else
            {
                Imageclass = "oi oi-expand-down";
                showDetailStatus = 0;
            }

        }
        concertIDs = concertID;
        arrConcertsDetail = await Http.GetJsonAsync<ConcertDetails[]>("/api/ConcertDetails/" + Convert.ToInt32(concertID));

    }
    //to Add New Concert Detail

    protected async Task AddNewConcertDetails(int concertMasterNO)
    {
        
        concertD = new ConcertDetails();
        concertD.ConcertNo = concertMasterNO;
        Messages = "";

        showAddDetail = true;
        showAddMaster = false;

    }

    //Save New or update Concert detail
    protected async Task SaveConcertDetails()
    {
        if (concertD.ConcertDetailNo == 0)

        {
            await Http.SendJsonAsync(HttpMethod.Post, "/api/ConcertDetails/", concertD);

        }
        else
        {
            await Http.SendJsonAsync(HttpMethod.Put, "/api/ConcertDetails/" + concertD.ConcertDetailNo, concertD);
        }

        arrConcertsDetail = await Http.GetJsonAsync<ConcertDetails[]>("/api/ConcertDetails/" + Convert.ToInt32(concertD.ConcertNo));
        concertD = new ConcertDetails();
        showAddDetail = false;
        showAddMaster = false;
        Messages = "";
    }

    //Edit Concert detail
    protected async Task EditConcertDetails(int ConcertDetailNos)
    {
        concertD = await Http.GetJsonAsync<ConcertDetails>("/api/ConcertDetails/" + Convert.ToInt32(ConcertDetailNos) + "/update");
        showAddDetail = true;
        showAddMaster = false;
    }

    //Delete Concert detail
    protected async Task DeleteConcertDetails(int concertDetailNos, int concertMasterNo)
    {
        var concertNo = concertMasterNo;
        await Http.DeleteAsync("/api/ConcertDetails/" + Convert.ToInt32(concertDetailNos));

        //arrConcertsDetail = await Http.GetJsonAsync<ConcertDetails[]>("/api/ConcertDetails/" + Convert.ToInt32(ordVale));
        Imageclass = "oi oi-expand-down";
        showDetailStatus = 0;
        await getConcertDetails(concertNo);
        Messages = "";
    }

    void closeMessage()
    {
        Messages = "";
    }
    void hideAddMaster()
    {
        showAddMaster = false;
    }
    void hideAddDetail()
    {
        showAddDetail = false;
    }
    void hideConcertDetails()
    {
        Imageclass = "oi oi-expand-down";
        showDetailStatus = 0;
    }



#line default
#line hidden
        [global::Microsoft.AspNetCore.Blazor.Components.InjectAttribute] private HttpClient Http { get; set; }
    }
}
#pragma warning restore 1591
