@using Blazor_CORE.Shared
@using Blazor_CORE.Shared.Models
@page "/Concerts"

@using System.Collections.Generic
@using Microsoft.AspNetCore.Blazor

@inject HttpClient Http

<link href="~/css/site.css" rel="stylesheet" />
<button class="btn btn-outline-info" onclick="@AddNewConcertsMaster">Add New Concert</button>

@if (showAddMaster == true)
{
    <table class="gridAddConcert" cellpadding="2" cellspacing="2">
        <tr class="gridAddConcertHeader">
            <td>
                <h3> Add/Edit Concert Master</h3>
            </td>
        </tr>
        <tr>
            <td>
                <table class="form-group">
                    <tr>
                        <td>
                            <label for="Name" class="control-label">Hall Name</label>
                        </td>
                        <td>
                            <input type="text" class="form-control" bind="@concertM.HallId" />
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <label for="Name" class="control-label">Description</label>
                        </td>
                        <td>
                            <input type="text" class="form-control" bind="@concertM.Description" />
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <label for="Name" class="control-label">Ticket service name</label>
                        </td>
                        <td>
                            <input type="text" class="form-control" bind="@concertM.TicketServiceName" />
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <label for="Name" class="control-label">Date</label>
                        </td>
                        <td>
                            <input type="text" class="form-control" bind="@concertM.ConcertDate" />
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <button type="submit" class="btn btn-outline-success" onclick="@(async () => await SaveConcertsMaster())">Save</button>
                        </td>
                        <td>
                            <button type="submit" class="btn btn-outline-danger" onclick=@hideAddMaster>Cancel</button>
                        </td>
                    </tr>
                </table>
            </td>
        </tr>
    </table>
}

@if (showAddDetail == true)
{
    <table class="gridAddDetail" cellpadding="2" cellspacing="2">
        <tr class="gridAddDetailHeader">
            <td>
                <h3> Add/Edit Concert Details</h3>
            </td>
        </tr>
        <tr>
            <td>
                <table class="form-group">
                    <tr>
                        <td>
                            <label for="Name" class="control-label">Concert No</label>
                        </td>
                        <td>
                            <input type="text" class="form-control" bind="@concertD.ConcertNo" readonly />
                        </td>
                        <td width="20">&nbsp;</td>
                        <td>
                            <label for="Name" class="control-label">Artist Name</label>
                        </td>
                        <td>
                            <input type="text" class="form-control" bind="@concertD.ArtistName" />
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <label for="Name" class="control-label">Comments</label>
                        </td>
                        <td>
                            <input type="text" class="form-control" bind="@concertD.Notes" />
                        </td>
                        <td width="20">&nbsp;</td>
                        <td>
                            <label for="Name" class="control-label">Quantity</label>
                        </td>
                        <td>
                            <input type="text" class="form-control" bind="@concertD.Quantity" />
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <label for="Name" class="control-label">Price</label>
                        </td>
                        <td>
                            <input type="text" class="form-control" bind="@concertD.Price" />
                        </td>
                        <td colspan="2" align="right">
                            <button type="submit" class="btn btn-outline-success" onclick="@(async () => await SaveConcertDetails())">Save</button>
                        </td>
                        <td>
                            <button type="submit" class="btn btn-outline-danger" onclick=@hideAddDetail>Cancel</button>
                        </td>
                    </tr>
                </table>
            </td>
        </tr>
    </table>
}

<img src="~/Images/blank.gif" alt="" width="1" height="2" />
<hr />
@if (arrConcertsMaster == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="form-group" cellpadding="2" cellspacing="2">
        <tr class="gridConcerstHeader">
            <td class="emptyCell"></td>
            <td class="headerCellEdit"><b>Edit</b></td>
            <td class="headerCellDelete"><b>Delete</b></td>
            <td class="gridConcertCIDColumn">
                <b>ConcertNo</b>&nbsp;
                <span class="@ImageSortClass" onclick="@(async () => await ConcertSorting("ConcertNo"))" />
            </td>
            <td class="gridConcertsSortColumn">
                <b>Hall Name</b>&nbsp;
                <span class="@ImageSortClass" onclick="@(async () => await ConcertSorting("HallId"))" />
            </td>
            <td class="gridConcertsSortColumn">
                <b>Description</b>&nbsp;
                <span class="@ImageSortClass" onclick="@(async () => await ConcertSorting("Description"))" />
            </td>
            <td class="gridConcertsSortDateColumn">
                <b> Concert Date</b>&nbsp;
                <span class="@ImageSortClass" onclick="@(async () => await ConcertSorting("ConcertDate"))" />
            </td>
            <td class="gridConcertsSortColumn">
                <b> Ticket service name</b>&nbsp;
                <span class="@ImageSortClass" onclick="@(async () => await ConcertSorting("TicketServiceName"))" />
            </td>
        </tr>
        <tr class="gridConcertFilterRow">
            <td class="headerCellFilter" colspan="4">
                <span class="oi oi-magnifying-glass" /> Filter By
            </td>
            <td class="filterInput">
                <input onchange=@OnHallIdChanged oninput="(this.dispatchEvent(new CustomEvent('change', {bubbles: true})))" />
            </td>
            <td class="filterInput">
                <input onchange=@OnDescriptionChanged oninput="(this.dispatchEvent(new CustomEvent('change', {bubbles: true})))" />
            </td>
            <td class="filterInput"></td>
            <td class="filterInput">
                <input onchange=@OnTicketServiceNameChanged oninput="(this.dispatchEvent(new CustomEvent('change', {bubbles: true})))" />
            </td>
        </tr>
        @foreach (var ConcertMasterObj in arrConcertsMaster)
        {
            <tr class="gridConcertRow" style="background-color: @(ConcertMasterObj.ConcertNo == concertIDs ? "#ECF3F4" : "#FFFFFF")">
                <td class="gridConcertDataCell">

                    @if (@ConcertMasterObj.ConcertNo == concertIDs)
                    {
                        @if (Imageclass == "oi oi-expand-down")
                        {
                            <span class="@Imageclass" onclick="@(async () => await getConcertDetails(@ConcertMasterObj.ConcertNo))"></span>
                        }
                        else
                        {
                            <span class="@Imageclass" onclick=@hideConcertDetails></span>
                        }

                    }
                    else
                    {
                        <span class="oi oi-expand-down" onclick="@(async () => await getConcertDetails(@ConcertMasterObj.ConcertNo))"></span>

                    }
                </td>
                <td class="gridConcertDataCell">

                    <span class="oi oi-pencil" alt="Edit" onclick="@(async () => await EditConcertsMaster(@ConcertMasterObj.ConcertNo))" />
                </td>
                <td class="gridConcertDataCell">

                    <span class="oi oi-trash" alt="Delete" onclick="@(async () => await DeleteConcertsMaster(@ConcertMasterObj.ConcertNo))" />
                </td>
                <td class="gridConcertDataCell">
                    @ConcertMasterObj.ConcertNo
                </td>
                <td class="gridConcertDataCell">
                    @ConcertMasterObj.HallId
                </td>
                <td class="gridConcertDataCell">
                    @ConcertMasterObj.Description
                </td>
                <td class="gridConcertDataCell">
                    @ConcertMasterObj.ConcertDate.ToShortDateString()
                </td>
                <td class="gridConcertDataCell">
                    @ConcertMasterObj.TicketServiceName
                </td>
            </tr>
            @if (arrConcertsDetail != null)
            {
                @if (showDetailStatus == 1)
                {
                    @if (@ConcertMasterObj.ConcertNo == concertIDs)
                    {

                        <tr>
                            <td valign="top">
                                <button class="btn btn-outline-info" onclick="@(async () => await AddNewConcertDetails(@ConcertMasterObj.ConcertNo))">Add New Detail</button>
                            </td>
                            <td colspan="7">
                                <table class="griDetails">
                                    <tr class="gridDetailsHeader" style="visibility: @(arrConcertsDetail.Length > 0 ? "visible" : "hidden")">
                                        <td class="headerCellEdit"><b>Edit</b></td>
                                        <td class="headerCellDelete"><b>Delete</b></td>
                                        <td class="gridConcertCIDColumn">
                                            <b> Concert Number</b>
                                        </td>
                                        <td class="gridDetailsCell">
                                            <b>  Concert Detail Number</b>
                                        </td>
                                        <td class="gridDetailsCellSmall">
                                            <b> Artist Name</b>
                                        </td>
                                        <td class="gridDetailsCellBig">
                                            <b>Comments</b>
                                        </td>
                                        <td class="gridDetailsCellSmall">
                                            <b>  QTY</b>
                                        </td>
                                        <td class="gridDetailsCellSmall">
                                            <b> Price</b>
                                        </td>
                                    </tr>
                                    @foreach (var concertDetailsObj in arrConcertsDetail)
                                    {
                                        <tr class="gridDetailsRow">
                                            <td class="gridConcertDataCell">

                                                <span class="oi oi-pencil" alt="Edit" onclick="@(async () => await EditConcertDetails(@concertDetailsObj.ConcertDetailNo))" />
                                            </td>
                                            <td class="gridConcertDataCell">

                                                <span class="oi oi-trash" alt="Delete" onclick="@(async () => await DeleteConcertDetails(@concertDetailsObj.ConcertDetailNo, @concertDetailsObj.ConcertNo))" />
                                            </td>
                                            <td class="gridConcertDataCell">
                                                @concertDetailsObj.ConcertNo
                                            </td>
                                            <td class="gridConcertDataCell">
                                                @concertDetailsObj.ConcertDetailNo
                                            </td>
                                            <td class="gridConcertDataCell">
                                                @concertDetailsObj.ArtistName
                                            </td>
                                            <td class="gridConcertDataCell">
                                                @concertDetailsObj.Notes
                                            </td>
                                            <td class="gridConcertDataCell">
                                                @concertDetailsObj.Quantity
                                            </td>
                                            <td class="gridConcertDataCell">
                                                @concertDetailsObj.Price
                                            </td>
                                        </tr>
                                    }
                                </table>
                            </td>
                        </tr>
                        <tr class="gridDetailsTotalRow" style="visibility: @(arrConcertsDetail.Length > 0 ? "visible" : "hidden")">
                            <td colspan="8" align="center">
                                Concerts Details of  Concerts NO - <strong> @ConcertMasterObj.ConcertNo </strong> ,Total @arrConcertsDetail.Length  details for this Concert
                            </td>
                        </tr>
                    }
                }
            }
        }
    </table>
}


@functions {

    ConcertMasters[] arrConcertsMaster;
    ConcertDetails[] arrConcertsDetail;


    ConcertMasters concertM = new ConcertMasters();
    ConcertDetails concertD = new ConcertDetails();

    Boolean showAddMaster = false;
    Boolean showAddDetail = false;

    int showDetailStatus = 0;
    int sortStatus = 0;
    int concertIDs = 0;
    string Imageclass = "oi oi-expand-down";
    string ImageSortClass = "oi oi-sort-ascending";

    string Messages = "";

    protected override async Task OnInitAsync()
    {
        arrConcertsMaster = await Http.GetJsonAsync<ConcertMasters[]>("api/ConcertMasters/");
        concertD = new ConcertDetails();
        concertM = new ConcertMasters();
        Messages = "";
    }

    //to Add New Concert Master

    void AddNewConcertsMaster()
    {

        concertM = new ConcertMasters();
        concertM.ConcertDate = DateTime.Now;

        showAddMaster = true;
        showAddDetail = false;
        Imageclass = "oi oi-expand-down";
        showDetailStatus = 0;
        Messages = "";
    }

    //Save New or update ConcertsMaster

    protected async Task SaveConcertsMaster()
    {
        if (concertM.ConcertNo == 0)

        //new concert
        {
            await Http.SendJsonAsync(HttpMethod.Post, "/api/ConcertMasters/", concertM);
        }
        //existing concert
        else
        {
            await Http.SendJsonAsync(HttpMethod.Put, "/api/ConcertMasters/" + concertM.ConcertNo, concertM);
        }
        concertM = new ConcertMasters();
        arrConcertsMaster = await Http.GetJsonAsync<ConcertMasters[]>("/api/ConcertMasters/");

        Messages = "";
        showAddMaster = false;

    }

    //Edit Concert Master

    protected async Task EditConcertsMaster(int ConcertNos)
    {
        showAddMaster = true;
        concertM = await Http.GetJsonAsync<ConcertMasters>("/api/ConcertMasters/" + Convert.ToInt32(ConcertNos));
    }

    //Delete Concert Master  
    protected async Task DeleteConcertsMaster(int ConcertNos)
    {
        await Http.DeleteAsync("/api/ConcertMasters/" + Convert.ToInt32(ConcertNos));

        arrConcertsMaster = await Http.GetJsonAsync<ConcertMasters[]>("/api/ConcertMasters/");
        Messages = "";
    }

    //Sorting
    protected async Task ConcertSorting(string SortColumn)
    {
        arrConcertsMaster = await Http.GetJsonAsync<ConcertMasters[]>("/api/ConcertMasters/");
        Messages = "";

        if (sortStatus == 1)
        {
            ImageSortClass = "oi oi-sort-descending";
            sortStatus = 0;

            switch (SortColumn)
            {
                case "ConcertNo":
                    arrConcertsMaster = arrConcertsMaster.OrderBy(x => x.ConcertNo).ToArray();
                    break;
                case "HallId":
                    arrConcertsMaster = arrConcertsMaster.OrderBy(x => x.HallId).ToArray();
                    break;

                case "Description":
                    arrConcertsMaster = arrConcertsMaster.OrderBy(x => x.Description).ToArray();
                    break;
                case "ConcertDate":
                    arrConcertsMaster = arrConcertsMaster.OrderBy(x => x.ConcertDate).ToArray();
                    break;
                case "TicketServiceName":
                    arrConcertsMaster = arrConcertsMaster.OrderBy(x => x.TicketServiceName).ToArray();
                    break;
            }
        }
        else
        {
            ImageSortClass = "oi oi-sort-ascending";
            sortStatus = 1;

            switch (SortColumn)
            {
                case "ConcertNo":
                    arrConcertsMaster = arrConcertsMaster.OrderByDescending(x => x.ConcertNo).ToArray();
                    break;
                case "HallId":
                    arrConcertsMaster = arrConcertsMaster.OrderByDescending(x => x.HallId).ToArray();
                    break;

                case "Description":
                    arrConcertsMaster = arrConcertsMaster.OrderByDescending(x => x.Description).ToArray();
                    break;
                case "ConcertDate":
                    arrConcertsMaster = arrConcertsMaster.OrderByDescending(x => x.ConcertDate).ToArray();
                    break;
                case "TicketServiceName":
                    arrConcertsMaster = arrConcertsMaster.OrderByDescending(x => x.TicketServiceName).ToArray();
                    break;
            }
        }
    }

    // For Filtering by ConcertNo
    void OnConcertNoChanged(UIChangeEventArgs args)
    {
        string values = args.Value.ToString();
        concertFilteringList(values, "ConcertNo");
    }


    // For Filtering by TableId
    void OnHallIdChanged(UIChangeEventArgs args)
    {
        string values = args.Value.ToString();
        concertFilteringList(values, "HallId");
    }


    // For Filtering by Description
    void OnDescriptionChanged(UIChangeEventArgs args)
    {
        string values = args.Value.ToString();
        concertFilteringList(values, "Description");
    }


    // For Filtering by ConcertDate
    void OnConcertDateChanged(UIChangeEventArgs args)
    {
        string values = args.Value.ToString();
        concertFilteringList(values, "ConcertDate");
    }

    // For Filtering by WaiterName
    void OnTicketServiceNameChanged(UIChangeEventArgs args)
    {
        string values = args.Value.ToString();
        concertFilteringList(values, "TicketServiceName");
    }



    //Filtering
    protected async Task concertFilteringList(String Value, string columnName)
    {
        arrConcertsMaster = await Http.GetJsonAsync<ConcertMasters[]>("/api/ConcertMasters/");

        Messages = "";
        if (Value.Trim().Length > 0)
        {

            switch (columnName)
            {

                case "HallId":
                    arrConcertsMaster = arrConcertsMaster.Where(x => x.HallId.StartsWith(Value)).ToArray();
                    break;
                case "Description":
                    arrConcertsMaster = arrConcertsMaster.Where(x => x.Description.StartsWith(Value)).ToArray();
                    break;
                case "TicketServiceName":
                    arrConcertsMaster = arrConcertsMaster.Where(x => x.TicketServiceName.StartsWith(Value)).ToArray();
                    break;
            }

        }
        else
        {
            arrConcertsMaster = await Http.GetJsonAsync<ConcertMasters[]>("/api/ConcertMasters/");
        }
    }

    //Detail Grid CRUD

    protected async Task getConcertDetails(int concertID)
    {
        showAddMaster = false;
        showAddDetail = false;
        Messages = "";
        if (concertIDs != concertID)
        {
            Imageclass = "oi oi-collapse-up";
            showDetailStatus = 1;

        }
        else
        {
            if (showDetailStatus == 0)
            {
                Imageclass = "oi oi-expand-up";
                showDetailStatus = 1;
            }
            else
            {
                Imageclass = "oi oi-expand-down";
                showDetailStatus = 0;
            }

        }
        concertIDs = concertID;
        arrConcertsDetail = await Http.GetJsonAsync<ConcertDetails[]>("/api/ConcertDetails/" + Convert.ToInt32(concertID));

    }
    //to Add New Concert Detail

    protected async Task AddNewConcertDetails(int concertMasterNO)
    {
        
        concertD = new ConcertDetails();
        concertD.ConcertNo = concertMasterNO;
        Messages = "";

        showAddDetail = true;
        showAddMaster = false;

    }

    //Save New or update Concert detail
    protected async Task SaveConcertDetails()
    {
        if (concertD.ConcertDetailNo == 0)

        {
            await Http.SendJsonAsync(HttpMethod.Post, "/api/ConcertDetails/", concertD);

        }
        else
        {
            await Http.SendJsonAsync(HttpMethod.Put, "/api/ConcertDetails/" + concertD.ConcertDetailNo, concertD);
        }

        arrConcertsDetail = await Http.GetJsonAsync<ConcertDetails[]>("/api/ConcertDetails/" + Convert.ToInt32(concertD.ConcertNo));
        concertD = new ConcertDetails();
        showAddDetail = false;
        showAddMaster = false;
        Messages = "";
    }

    //Edit Concert detail
    protected async Task EditConcertDetails(int ConcertDetailNos)
    {
        concertD = await Http.GetJsonAsync<ConcertDetails>("/api/ConcertDetails/" + Convert.ToInt32(ConcertDetailNos) + "/update");
        showAddDetail = true;
        showAddMaster = false;
    }

    //Delete Concert detail
    protected async Task DeleteConcertDetails(int concertDetailNos, int concertMasterNo)
    {
        var concertNo = concertMasterNo;
        await Http.DeleteAsync("/api/ConcertDetails/" + Convert.ToInt32(concertDetailNos));

        //arrConcertsDetail = await Http.GetJsonAsync<ConcertDetails[]>("/api/ConcertDetails/" + Convert.ToInt32(ordVale));
        Imageclass = "oi oi-expand-down";
        showDetailStatus = 0;
        await getConcertDetails(concertNo);
        Messages = "";
    }

    void closeMessage()
    {
        Messages = "";
    }
    void hideAddMaster()
    {
        showAddMaster = false;
    }
    void hideAddDetail()
    {
        showAddDetail = false;
    }
    void hideConcertDetails()
    {
        Imageclass = "oi oi-expand-down";
        showDetailStatus = 0;
    }


}
